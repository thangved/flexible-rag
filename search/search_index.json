{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Flexible RAG","text":"<p>Implemented a RAG (Retrieval-Augmented Generation) with common APIs, without any specific task in mind. This is a flexible RAG that can be used for any task with a simple configuration.</p>"},{"location":"index.html#license","title":"License","text":""},{"location":"api/restful.html","title":"RESTful API","text":""},{"location":"blog/index.html","title":"Blogs","text":""},{"location":"blog/2024/10/24/example-post.html","title":"Example post","text":"","tags":["Example tag"]},{"location":"blog/2024/10/24/example-post.html#example-heading-2","title":"Example Heading 2","text":"<p>Example content.</p> <pre><code>print(\"Example code block\")\n</code></pre> <pre><code>erDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER {\n        string name\n        string email\n    }\n    ORDER {\n        date ordered\n    }\n    LINE-ITEM {\n        int quantity\n    }</code></pre> Method Description <code>GET</code>  Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>  Delete resource","tags":["Example tag"]},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li> api<ul> <li> config</li> <li> dependencies</li> <li> main</li> <li> routes<ul> <li> chat_llm</li> <li> rerank</li> <li> vector_store</li> </ul> </li> </ul> </li> <li> core<ul> <li> chat_llm</li> <li> models<ul> <li> chat</li> <li> documents</li> </ul> </li> <li> rerank</li> <li> vector_store</li> </ul> </li> </ul>"},{"location":"reference/api/index.html","title":"api","text":"<p>api package.</p> <p>FlexibleRAG api package.</p>"},{"location":"reference/api/config.html","title":"api.config","text":""},{"location":"reference/api/dependencies.html","title":"api.dependencies","text":""},{"location":"reference/api/dependencies.html#api.dependencies.CohereChatModel","title":"<code>CohereChatModel</code>","text":"<p>               Bases: <code>ChatLLMModel</code></p> <p>Cohere chat model.</p> Source code in <code>api/dependencies.py</code> <pre><code>class CohereChatModel(ChatLLMModel):\n    \"\"\"Cohere chat model.\"\"\"\n\n    def chat(self, chat_input) -&gt; str:\n        \"\"\"\n        Chat with the model.\n\n        Args:\n            chat_input (core.models.chat.ChatInput): Chat input\n\n        Returns:\n            str: Chat response\n        \"\"\"\n        messages = [transform_chat_message(m) for m in chat_input.messages]\n        res = co.chat(messages=messages, model=\"command-r-plus-08-2024\")\n        return res.message.content[0].text\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.CohereChatModel.chat","title":"<code>chat(chat_input)</code>","text":"<p>Chat with the model.</p> <p>Parameters:</p> Name Type Description Default <code>chat_input</code> <code>ChatInput</code> <p>Chat input</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chat response</p> Source code in <code>api/dependencies.py</code> <pre><code>def chat(self, chat_input) -&gt; str:\n    \"\"\"\n    Chat with the model.\n\n    Args:\n        chat_input (core.models.chat.ChatInput): Chat input\n\n    Returns:\n        str: Chat response\n    \"\"\"\n    messages = [transform_chat_message(m) for m in chat_input.messages]\n    res = co.chat(messages=messages, model=\"command-r-plus-08-2024\")\n    return res.message.content[0].text\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.CohereEmbeddingsFunction","title":"<code>CohereEmbeddingsFunction</code>","text":"<p>               Bases: <code>EmbeddingFunction</code></p> <p>Cohere embeddings function.</p> Source code in <code>api/dependencies.py</code> <pre><code>class CohereEmbeddingsFunction(EmbeddingFunction):\n    \"\"\"Cohere embeddings function.\"\"\"\n\n    # skipcq: PYL-W0622\n    def __call__(self, input: Documents) -&gt; Optional[list[list[float]]]:\n        \"\"\"\n        Call embeddings\n\n        Args:\n              input (Documents): embeddings input\n\n        Returns:\n            Optional[list[list[float]]: Embeddings output\n        \"\"\"\n        response = co.embed(\n            texts=input,\n            model=\"embed-multilingual-v2.0\",\n            input_type=\"search_document\",\n            embedding_types=[\"float\"],\n        )\n        return response.embeddings.float_\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.CohereEmbeddingsFunction.__call__","title":"<code>__call__(input)</code>","text":"<p>Call embeddings</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Documents</code> <p>embeddings input</p> required <p>Returns:</p> Type Description <code>Optional[list[list[float]]]</code> <p>Optional[list[list[float]]: Embeddings output</p> Source code in <code>api/dependencies.py</code> <pre><code>def __call__(self, input: Documents) -&gt; Optional[list[list[float]]]:\n    \"\"\"\n    Call embeddings\n\n    Args:\n          input (Documents): embeddings input\n\n    Returns:\n        Optional[list[list[float]]: Embeddings output\n    \"\"\"\n    response = co.embed(\n        texts=input,\n        model=\"embed-multilingual-v2.0\",\n        input_type=\"search_document\",\n        embedding_types=[\"float\"],\n    )\n    return response.embeddings.float_\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.CohereRerankModel","title":"<code>CohereRerankModel</code>","text":"<p>               Bases: <code>RerankModel</code></p> <p>Cohere rerank model.</p> Source code in <code>api/dependencies.py</code> <pre><code>class CohereRerankModel(RerankModel):\n    \"\"\"Cohere rerank model.\"\"\"\n\n    def rerank_documents(self, query, docs) -&gt; list[float]:\n        \"\"\"\n        Rerank the documents based on the query.\n\n        Args:\n            query (str): The query use to rerank\n            docs (list[str]): List of documents\n\n        Returns:\n            List[float]: List of relevance scores\n        \"\"\"\n        res = co.rerank(documents=docs, query=query, model=\"rerank-multilingual-v2.0\")\n        sorted_index = sorted(res.results, key=lambda x: x.index)\n        return [el.relevance_score for el in sorted_index]\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.CohereRerankModel.rerank_documents","title":"<code>rerank_documents(query, docs)</code>","text":"<p>Rerank the documents based on the query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query use to rerank</p> required <code>docs</code> <code>list[str]</code> <p>List of documents</p> required <p>Returns:</p> Type Description <code>list[float]</code> <p>List[float]: List of relevance scores</p> Source code in <code>api/dependencies.py</code> <pre><code>def rerank_documents(self, query, docs) -&gt; list[float]:\n    \"\"\"\n    Rerank the documents based on the query.\n\n    Args:\n        query (str): The query use to rerank\n        docs (list[str]): List of documents\n\n    Returns:\n        List[float]: List of relevance scores\n    \"\"\"\n    res = co.rerank(documents=docs, query=query, model=\"rerank-multilingual-v2.0\")\n    sorted_index = sorted(res.results, key=lambda x: x.index)\n    return [el.relevance_score for el in sorted_index]\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.get_chat_model","title":"<code>get_chat_model()</code>","text":"<p>Creates a chat model.</p> <p>Returns:</p> Name Type Description <code>ChatCohere</code> <code>CohereChatModel</code> <p>Chat model</p> Source code in <code>api/dependencies.py</code> <pre><code>def get_chat_model() -&gt; CohereChatModel:\n    \"\"\"\n    Creates a chat model.\n\n    Returns:\n        ChatCohere: Chat model\n    \"\"\"\n    return CohereChatModel()\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.get_chroma_client","title":"<code>get_chroma_client()</code>","text":"<p>Creates a Chroma client to connect to the Chroma server.</p> <p>Returns:</p> Type Description <code>Client</code> <p>chromadb.Client: Chroma client</p> Source code in <code>api/dependencies.py</code> <pre><code>def get_chroma_client() -&gt; chromadb.Client:\n    \"\"\"\n    Creates a Chroma client to connect to the Chroma server.\n\n    Returns:\n        chromadb.Client: Chroma client\n    \"\"\"\n    try:\n        return chromadb.HttpClient(\n            host=CHROMA_HOST,\n            port=CHROMA_PORT,\n        )\n    except BaseException as e:\n        logger.error(\"Error creating Chroma client: %s\", e)\n        return chromadb.Client()\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.get_embeddings_function","title":"<code>get_embeddings_function()</code>","text":"<p>Creates a Cohere embeddings function.</p> <p>Returns:</p> Name Type Description <code>CohereEmbeddings</code> <code>CohereEmbeddingsFunction</code> <p>Cohere embeddings function</p> Source code in <code>api/dependencies.py</code> <pre><code>def get_embeddings_function() -&gt; CohereEmbeddingsFunction:\n    \"\"\"\n    Creates a Cohere embeddings function.\n\n    Returns:\n        CohereEmbeddings: Cohere embeddings function\n    \"\"\"\n    return CohereEmbeddingsFunction(\n        cohere_api_key=COHERE_API_KEY,\n    )\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.get_rerank_model","title":"<code>get_rerank_model()</code>","text":"<p>Creates a rerank model.</p> <p>Returns:</p> Name Type Description <code>CohereRerankModel</code> <code>CohereRerankModel</code> <p>Rerank model</p> Source code in <code>api/dependencies.py</code> <pre><code>def get_rerank_model() -&gt; CohereRerankModel:\n    \"\"\"\n    Creates a rerank model.\n\n    Returns:\n        CohereRerankModel: Rerank model\n    \"\"\"\n    return CohereRerankModel()\n</code></pre>"},{"location":"reference/api/dependencies.html#api.dependencies.transform_chat_message","title":"<code>transform_chat_message(chat_message)</code>","text":"<p>Transforms a chat message to a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>chat_message</code> <code>ChatMessage</code> <p>Chat message</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Chat message dictionary</p> Source code in <code>api/dependencies.py</code> <pre><code>def transform_chat_message(chat_message: ChatMessage) -&gt; dict:\n    \"\"\"\n    Transforms a chat message to a dictionary.\n\n    Args:\n        chat_message (ChatMessage): Chat message\n\n    Returns:\n        dict: Chat message dictionary\n    \"\"\"\n    role = \"user\"\n    if chat_message.role == ChatMessageRole.Ai:\n        role = \"assistant\"\n    if chat_message.role == ChatMessageRole.System:\n        role = \"system\"\n    return {\n        \"role\": role,\n        \"content\": chat_message.content,\n    }\n</code></pre>"},{"location":"reference/api/main.html","title":"api.main","text":""},{"location":"reference/api/routes/index.html","title":"api.routes","text":"<p>api.routers package.</p> <p>FlexibleRAG api.routers package.</p>"},{"location":"reference/api/routes/chat_llm.html","title":"api.routes.chat_llm","text":""},{"location":"reference/api/routes/chat_llm.html#api.routes.chat_llm.ChatOutput","title":"<code>ChatOutput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Chat output</p> <p>Attributes:</p> Name Type Description <code>content</code> <code>str</code> <p>Content of the message</p> Source code in <code>api/routes/chat_llm.py</code> <pre><code>class ChatOutput(BaseModel):\n    \"\"\"\n    Chat output\n\n    Attributes:\n        content (str): Content of the message\n    \"\"\"\n\n    content: str = Field(\n        ...,\n        title=\"Content of the message\",\n        description=\"Content of the message\",\n        examples=[\"Hello, how can I help you today?\"],\n    )\n</code></pre>"},{"location":"reference/api/routes/chat_llm.html#api.routes.chat_llm.chat","title":"<code>chat(chat_input, chat_model=Depends(get_chat_model))</code>","text":"<p>Chat with the chat model</p> <p>Parameters:</p> Name Type Description Default <code>chat_input</code> <code>ChatInput</code> <p>Chat input</p> required <code>chat_model</code> <code>BaseChatModel</code> <p>Chat model</p> <code>Depends(get_chat_model)</code> <p>Returns:</p> Name Type Description <code>ChatOutput</code> <code>Annotated[ChatOutput, 'Chat Output']</code> <p>Chat output</p> Source code in <code>api/routes/chat_llm.py</code> <pre><code>@router.post(\n    \"\",\n    description=\"Chat with the chat model\",\n    summary=\"Chat with the chat model\",\n    response_description=\"Response of the model\",\n)\ndef chat(\n    chat_input: Annotated[ChatInput, \"Chat Input\"], chat_model=Depends(get_chat_model)\n) -&gt; Annotated[ChatOutput, \"Chat Output\"]:\n    \"\"\"\n    Chat with the chat model\n\n    Args:\n        chat_input (ChatInput): Chat input\n        chat_model (BaseChatModel): Chat model\n\n    Returns:\n        ChatOutput: Chat output\n    \"\"\"\n    chat_llm = ChatLLM(chat_model=chat_model)\n    res = chat_llm.chat(chat_input=chat_input)\n    return ChatOutput(content=res)\n</code></pre>"},{"location":"reference/api/routes/rerank.html","title":"api.routes.rerank","text":""},{"location":"reference/api/routes/rerank.html#api.routes.rerank.RerankInput","title":"<code>RerankInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Rerank Input</p> Source code in <code>api/routes/rerank.py</code> <pre><code>class RerankInput(BaseModel):\n    \"\"\"Rerank Input\"\"\"\n\n    model_config = {\n        \"title\": \"Rerank Input\",\n        \"strict\": True,\n    }\n    query: str = Field(\n        ...,\n        title=\"Query\",\n        description=\"Query\",\n        examples=[\"Hoang Sa and Truong Sa belong to Vietnam\"],\n    )\n    documents: list[Document] = Field(\n        ...,\n        title=\"Documents\",\n        description=\"List of documents\",\n        examples=[\n            [\n                {\n                    \"page_content\": \"Document 1\",\n                    \"metadata\": {\n                        \"reference_id\": \"1\",\n                    },\n                },\n                {\n                    \"page_content\": \"Document 2\",\n                    \"metadata\": {\n                        \"reference_id\": \"2\",\n                    },\n                },\n            ]\n        ],\n    )\n</code></pre>"},{"location":"reference/api/routes/rerank.html#api.routes.rerank.RerankOutput","title":"<code>RerankOutput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Rerank Output</p> Source code in <code>api/routes/rerank.py</code> <pre><code>class RerankOutput(BaseModel):\n    \"\"\"Rerank Output\"\"\"\n\n    model_config = {\n        \"title\": \"Rerank Output\",\n        \"strict\": True,\n    }\n    query: str = Field(\n        ...,\n        title=\"Query\",\n        description=\"Query\",\n        examples=[\"Hoang Sa and Truong Sa belong to Vietnam\"],\n    )\n    documents: list[DocumentWithScore] = Field(\n        ...,\n        title=\"Documents\",\n        description=\"List of documents\",\n        examples=[\n            [\n                {\n                    \"page_content\": \"Document 1\",\n                    \"metadata\": {\n                        \"reference_id\": \"1\",\n                    },\n                    \"score\": 0.9,\n                },\n                {\n                    \"page_content\": \"Document 2\",\n                    \"metadata\": {\n                        \"reference_id\": \"2\",\n                    },\n                    \"score\": 0.8,\n                },\n            ]\n        ],\n    )\n</code></pre>"},{"location":"reference/api/routes/rerank.html#api.routes.rerank.rerank_documents","title":"<code>rerank_documents(rerank_input, rerank_model)</code>","text":"<p>Rerank the documents based on the query</p> <p>Parameters:</p> Name Type Description Default <code>rerank_input</code> <code>RerankInput</code> <p>Rerank input</p> required <code>rerank_model</code> <code>RerankModel</code> <p>Rerank model</p> required <p>Returns:</p> Name Type Description <code>RerankOutput</code> <code>RerankOutput</code> <p>Rerank output</p> Source code in <code>api/routes/rerank.py</code> <pre><code>@router.post(\n    \"\",\n    description=\"Rerank the documents based on the query\",\n    summary=\"Rerank the documents\",\n    response_description=\"List of documents with ranked score and sorted by score\",\n)\ndef rerank_documents(\n    rerank_input: RerankInput,\n    rerank_model: Annotated[RerankModel, Depends(get_rerank_model)],\n) -&gt; RerankOutput:\n    \"\"\"\n    Rerank the documents based on the query\n\n    Args:\n        rerank_input (RerankInput): Rerank input\n        rerank_model (RerankModel): Rerank model\n\n    Returns:\n        RerankOutput: Rerank output\n    \"\"\"\n    rerank = Rerank(model=rerank_model)\n    reranked_documents = rerank.rerank_documents(\n        rerank_input.query, rerank_input.documents\n    )\n    return RerankOutput(query=rerank_input.query, documents=reranked_documents)\n</code></pre>"},{"location":"reference/api/routes/vector_store.html","title":"api.routes.vector_store","text":""},{"location":"reference/api/routes/vector_store.html#api.routes.vector_store.AddDocumentInput","title":"<code>AddDocumentInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Add Document Input</p> <p>Attributes:</p> Name Type Description <code>content</code> <code>str</code> <p>Document content</p> <code>collection_name</code> <code>str</code> <p>Collection name</p> <code>reference_id</code> <code>str</code> <p>Reference ID</p> Source code in <code>api/routes/vector_store.py</code> <pre><code>class AddDocumentInput(BaseModel):\n    \"\"\"\n    Add Document Input\n\n    Attributes:\n        content (str): Document content\n        collection_name (str): Collection name\n        reference_id (str): Reference ID\n    \"\"\"\n\n    model_config = {\n        \"title\": \"Add Document Input\",\n        \"strict\": True,\n    }\n    content: str = Field(\n        ...,\n        description=\"Document content\",\n        title=\"Document content\",\n        examples=[\"Ho\u00e0ng Sa v\u00e0 Tr\u01b0\u1eddng Sa l\u00e0 c\u1ee7a Vi\u1ec7t Nam\"],\n    )\n    collection_name: str = Field(\n        ...,\n        description=\"Collection name\",\n        title=\"Collection name\",\n        examples=[\"geography\"],\n    )\n    reference_id: str = Field(\n        ...,\n        description=\"Reference ID\",\n        title=\"Reference ID\",\n        examples=[\"1\"],\n    )\n</code></pre>"},{"location":"reference/api/routes/vector_store.html#api.routes.vector_store.AddDocumentResponse","title":"<code>AddDocumentResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Add Document Response</p> <p>Attributes:</p> Name Type Description <code>ids</code> <code>list[str]</code> <p>List of unique document IDs</p> Source code in <code>api/routes/vector_store.py</code> <pre><code>class AddDocumentResponse(BaseModel):\n    \"\"\"\n    Add Document Response\n\n    Attributes:\n        ids (list[str]): List of unique document IDs\n    \"\"\"\n\n    model_config = {\n        \"title\": \"Add Document Response\",\n        \"strict\": True,\n    }\n    ids: list[str] = Field(\n        ...,\n        description=\"A list of unique document IDs\",\n        title=\"Stored document IDs\",\n        examples=[\"Uj9uY4N41cpSZb0MHBY_w\"],\n    )\n</code></pre>"},{"location":"reference/api/routes/vector_store.html#api.routes.vector_store.DocumentWithReference","title":"<code>DocumentWithReference</code>","text":"<p>               Bases: <code>DocumentWithScore</code></p> <p>Document with reference</p> Source code in <code>api/routes/vector_store.py</code> <pre><code>class DocumentWithReference(DocumentWithScore):\n    \"\"\"Document with reference\"\"\"\n\n    reference: dict = Field(description=\"Reference\", title=\"Reference\", default=None)\n</code></pre>"},{"location":"reference/api/routes/vector_store.html#api.routes.vector_store.SimilaritySearchResponse","title":"<code>SimilaritySearchResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Similarity Search Response</p> <p>Attributes:</p> Name Type Description <code>documents</code> <code>list[DocumentWithReference]</code> <p>List of documents</p> Source code in <code>api/routes/vector_store.py</code> <pre><code>class SimilaritySearchResponse(BaseModel):\n    \"\"\"\n    Similarity Search Response\n\n    Attributes:\n        documents (list[DocumentWithReference]): List of documents\n    \"\"\"\n\n    model_config = {\n        \"title\": \"Similarity Search Response\",\n        \"strict\": True,\n    }\n    documents: list[DocumentWithReference] = Field(\n        ...,\n        description=\"List of documents\",\n        title=\"List of documents\",\n    )\n    query: str = Field(\n        ...,\n        description=\"Query string\",\n        title=\"Query string\",\n    )\n</code></pre>"},{"location":"reference/api/routes/vector_store.html#api.routes.vector_store.create_document","title":"<code>create_document(document, chroma_client, cohere_embeddings)</code>","text":"<p>Add a document to the vector store</p> <p>Parameters:</p> Name Type Description Default <code>document</code> <code>AddDocumentInput</code> <p>Add Document Input</p> required <code>chroma_client</code> <code>Client</code> <p>Chroma client</p> required <code>cohere_embeddings</code> <code>Embeddings</code> <p>Embeddings function</p> required <p>Returns:</p> Name Type Description <code>AddDocumentResponse</code> <code>Annotated[AddDocumentResponse, 'Document added']</code> <p>Document added</p> Source code in <code>api/routes/vector_store.py</code> <pre><code>@router.post(\n    \"\",\n    description=\"Add a document to the vector store\",\n    summary=\"Add a document to the vector store\",\n    name=\"Add Document\",\n    response_description=\"Document added\",\n)\ndef create_document(\n    document: Annotated[\n        AddDocumentInput,\n        \"Add Document Input\",\n    ],\n    chroma_client: Annotated[\n        chromadb.Client,\n        Depends(get_chroma_client),\n    ],\n    cohere_embeddings: Annotated[\n        CohereEmbeddingsFunction,\n        Depends(get_embeddings_function),\n    ],\n) -&gt; Annotated[\n    AddDocumentResponse,\n    \"Document added\",\n]:\n    \"\"\"\n    Add a document to the vector store\n\n    Args:\n        document (AddDocumentInput): Add Document Input\n        chroma_client (chromadb.Client): Chroma client\n        cohere_embeddings (Embeddings): Embeddings function\n\n    Returns:\n        AddDocumentResponse: Document added\n    \"\"\"\n    vector_store = VectorStore(\n        collection_name=document.collection_name,\n        client=chroma_client,\n        embeddings=cohere_embeddings,\n    )\n    ids = vector_store.add_documents(\n        [document.content],\n        reference_id=document.reference_id,\n    )\n    return AddDocumentResponse(ids=ids)\n</code></pre>"},{"location":"reference/api/routes/vector_store.html#api.routes.vector_store.delete_documents_by_reference_id","title":"<code>delete_documents_by_reference_id(reference_id, collection_name, chroma_client)</code>","text":"<p>Delete documents by reference ID</p> <p>Parameters:</p> Name Type Description Default <code>reference_id</code> <code>str</code> <p>Reference ID</p> required <code>collection_name</code> <code>str</code> <p>Collection name</p> required <code>chroma_client</code> <code>Client</code> <p>Chroma client</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>Annotated[None, 'No content']</code> <p>No content</p> Source code in <code>api/routes/vector_store.py</code> <pre><code>@router.delete(\n    \"/{reference_id}\",\n    description=\"Delete documents by reference ID\",\n    summary=\"Delete documents by reference ID\",\n    response_description=\"No content\",\n)\ndef delete_documents_by_reference_id(\n    reference_id: Annotated[\n        str,\n        \"Reference ID\",\n    ],\n    collection_name: Annotated[\n        str,\n        \"Collection name\",\n    ],\n    chroma_client: Annotated[\n        chromadb.Client,\n        Depends(get_chroma_client),\n    ],\n) -&gt; Annotated[\n    None,\n    \"No content\",\n]:\n    \"\"\"\n    Delete documents by reference ID\n\n    Args:\n        reference_id (str): Reference ID\n        collection_name (str): Collection name\n        chroma_client (chromadb.Client): Chroma client\n\n    Returns:\n        None: No content\n    \"\"\"\n    vector_store = VectorStore(\n        collection_name=collection_name,\n        client=chroma_client,\n    )\n    vector_store.delete_by_reference_id(reference_id=reference_id)\n    return Response(status_code=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"reference/api/routes/vector_store.html#api.routes.vector_store.similarity_search","title":"<code>similarity_search(collection_name, chroma_client, cohere_embeddings, query, k=10, reference_id=None, reference_callback=None)</code>","text":"<p>Search for similar documents</p> <p>Parameters:</p> Name Type Description Default <code>collection_name</code> <code>str</code> <p>Collection name</p> required <code>chroma_client</code> <code>Client</code> <p>Chroma client</p> required <code>cohere_embeddings</code> <code>CohereEmbeddingsFunction</code> <p>Embeddings function</p> required <code>query</code> <code>str</code> <p>Query string</p> required <code>k</code> <code>int</code> <p>Number of documents to return</p> <code>10</code> <code>reference_id</code> <code>str</code> <p>Reference ID</p> <code>None</code> <code>reference_callback</code> <code>str</code> <p>Reference callback url</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SimilaritySearchResponse</code> <code>Annotated[SimilaritySearchResponse, 'Similarity Search Response']</code> <p>Similarity Search Response</p> Source code in <code>api/routes/vector_store.py</code> <pre><code>@router.get(\n    \"\",\n    name=\"Similarity Search\",\n    description=\"Search for similar documents\",\n    summary=\"Search for similar documents\",\n    response_description=\"List of similar documents\",\n)\ndef similarity_search(\n    collection_name: Annotated[\n        str,\n        \"Collection name\",\n    ],\n    chroma_client: Annotated[\n        chromadb.Client,\n        Depends(get_chroma_client),\n    ],\n    cohere_embeddings: Annotated[\n        CohereEmbeddingsFunction,\n        Depends(get_embeddings_function),\n    ],\n    query: Annotated[\n        str,\n        \"Query string\",\n    ],\n    k: Annotated[\n        int,\n        \"Number of documents to return\",\n    ] = 10,\n    reference_id: Annotated[\n        Optional[str],\n        \"Reference ID\",\n    ] = None,\n    reference_callback: Annotated[Optional[str], \"Reference callback\"] = None,\n) -&gt; Annotated[\n    SimilaritySearchResponse,\n    \"Similarity Search Response\",\n]:\n    \"\"\"\n    Search for similar documents\n\n    Args:\n        collection_name (str): Collection name\n        chroma_client (chromadb.Client): Chroma client\n        cohere_embeddings (CohereEmbeddingsFunction): Embeddings function\n        query (str): Query string\n        k (int): Number of documents to return\n        reference_id (str): Reference ID\n        reference_callback (str): Reference callback url\n\n    Returns:\n        SimilaritySearchResponse: Similarity Search Response\n    \"\"\"\n    vector_store = VectorStore(\n        collection_name=collection_name,\n        client=chroma_client,\n        embeddings=cohere_embeddings,\n    )\n    result_documents = vector_store.similarity_search(\n        query=query,\n        reference_id=reference_id,\n        k=k,\n    )\n\n    def map_documents(doc: Tuple[Document, float]):\n        \"\"\"\n        Map foreach document and return the result\n\n        Args:\n            doc (Tuple[Document, float]): A tuple contain document and score\n\n        Returns:\n            DocumentWithReference: Mapped document\n        \"\"\"\n        mapped_document = DocumentWithReference(\n            page_content=doc[0].page_content,\n            metadata=doc[0].metadata,\n            score=doc[1],\n        )\n        if reference_callback is not None:\n            try:\n                mapped_document.reference = httpx.get(\n                    url=reference_callback.format(\n                        reference_id=doc[0].metadata.reference_id\n                    ),\n                    timeout=1,\n                ).json()\n            except BaseException as e:\n                logger.warning(\"Call reference_callback error: %s\", e)\n                mapped_document.reference = {\"id\": doc[0].metadata.reference_id}\n        return mapped_document\n\n    documents = list(map(map_documents, result_documents))\n    return SimilaritySearchResponse(\n        documents=documents,\n        query=query,\n    )\n</code></pre>"},{"location":"reference/core/index.html","title":"core","text":"<p>core package.</p> <p>FlexibleRAG core package.</p>"},{"location":"reference/core/chat_llm.html","title":"core.chat_llm","text":""},{"location":"reference/core/chat_llm.html#core.chat_llm.ChatInput","title":"<code>ChatInput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Chat input</p> <p>Attributes:</p> Name Type Description <code>messages</code> <code>list[ChatMessage]</code> <p>Messages</p> Source code in <code>core/chat_llm.py</code> <pre><code>class ChatInput(BaseModel):\n    \"\"\"\n    Chat input\n\n    Attributes:\n        messages (list[ChatMessage]): Messages\n    \"\"\"\n\n    messages: list[ChatMessage] = Field(\n        ...,\n        title=\"Messages\",\n        description=\"Messages\",\n    )\n</code></pre>"},{"location":"reference/core/chat_llm.html#core.chat_llm.ChatLLM","title":"<code>ChatLLM</code>","text":"<p>Chat with a language model</p> <p>Attributes:</p> Name Type Description <code>chat_model</code> <code>BaseChatModel</code> <p>A chat model</p> Source code in <code>core/chat_llm.py</code> <pre><code>class ChatLLM:\n    \"\"\"\n    Chat with a language model\n\n    Attributes:\n        chat_model (BaseChatModel): A chat model\n    \"\"\"\n\n    def __init__(\n        self,\n        chat_model: Annotated[ChatLLMModel, \"A chat model\"],\n    ) -&gt; None:\n        \"\"\"\n        Create a ChatLLM\n\n        Args:\n            chat_model (BaseChatModel): A chat model\n        \"\"\"\n        self.chat_model = chat_model\n\n    def chat(self, chat_input: Annotated[ChatInput, \"Chat Input\"]) -&gt; str:\n        \"\"\"\n        Chat with the chat model\n\n        Args:\n            chat_input (LanguageModelInput): Chat input\n\n        Returns:\n            str: Chat output\n        \"\"\"\n        return self.chat_model.chat(chat_input)\n</code></pre>"},{"location":"reference/core/chat_llm.html#core.chat_llm.ChatLLM.__init__","title":"<code>__init__(chat_model)</code>","text":"<p>Create a ChatLLM</p> <p>Parameters:</p> Name Type Description Default <code>chat_model</code> <code>BaseChatModel</code> <p>A chat model</p> required Source code in <code>core/chat_llm.py</code> <pre><code>def __init__(\n    self,\n    chat_model: Annotated[ChatLLMModel, \"A chat model\"],\n) -&gt; None:\n    \"\"\"\n    Create a ChatLLM\n\n    Args:\n        chat_model (BaseChatModel): A chat model\n    \"\"\"\n    self.chat_model = chat_model\n</code></pre>"},{"location":"reference/core/chat_llm.html#core.chat_llm.ChatLLM.chat","title":"<code>chat(chat_input)</code>","text":"<p>Chat with the chat model</p> <p>Parameters:</p> Name Type Description Default <code>chat_input</code> <code>LanguageModelInput</code> <p>Chat input</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chat output</p> Source code in <code>core/chat_llm.py</code> <pre><code>def chat(self, chat_input: Annotated[ChatInput, \"Chat Input\"]) -&gt; str:\n    \"\"\"\n    Chat with the chat model\n\n    Args:\n        chat_input (LanguageModelInput): Chat input\n\n    Returns:\n        str: Chat output\n    \"\"\"\n    return self.chat_model.chat(chat_input)\n</code></pre>"},{"location":"reference/core/chat_llm.html#core.chat_llm.ChatLLMModel","title":"<code>ChatLLMModel</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Chat with a language model</p> Source code in <code>core/chat_llm.py</code> <pre><code>class ChatLLMModel(ABC):\n    \"\"\"Chat with a language model\"\"\"\n\n    @abstractmethod\n    def chat(self, chat_input: Annotated[ChatInput, \"Chat Input\"]) -&gt; str:\n        \"\"\"\n        Chat with the chat model\n\n        Args:\n            chat_input (ChatInput): Chat input\n\n        Returns:\n            str: Chat output\n        \"\"\"\n</code></pre>"},{"location":"reference/core/chat_llm.html#core.chat_llm.ChatLLMModel.chat","title":"<code>chat(chat_input)</code>  <code>abstractmethod</code>","text":"<p>Chat with the chat model</p> <p>Parameters:</p> Name Type Description Default <code>chat_input</code> <code>ChatInput</code> <p>Chat input</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Chat output</p> Source code in <code>core/chat_llm.py</code> <pre><code>@abstractmethod\ndef chat(self, chat_input: Annotated[ChatInput, \"Chat Input\"]) -&gt; str:\n    \"\"\"\n    Chat with the chat model\n\n    Args:\n        chat_input (ChatInput): Chat input\n\n    Returns:\n        str: Chat output\n    \"\"\"\n</code></pre>"},{"location":"reference/core/rerank.html","title":"core.rerank","text":""},{"location":"reference/core/rerank.html#core.rerank.Rerank","title":"<code>Rerank</code>","text":"<p>Rerank</p> Source code in <code>core/rerank.py</code> <pre><code>class Rerank:\n    \"\"\"Rerank\"\"\"\n\n    def __init__(self, model: Annotated[RerankModel, \"Rerank model\"]) -&gt; None:\n        \"\"\"\n        Initialize the rerank model\n\n        Args:\n            model (RerankModel): Rerank model\n        \"\"\"\n        self.model = model\n\n    def rerank_documents(\n        self,\n        query: Annotated[str, \"The query use to rerank\"],\n        docs: Annotated[List[Document], \"List of documents\"],\n    ) -&gt; Annotated[\n        List[DocumentWithScore],\n        \"List of documents with ranked score and sorted by score\",\n    ]:\n        \"\"\"\n        Rerank the documents based on the query\n\n        Args:\n            query (str): The query use to rerank\n            docs (List[Document]): List of documents\n\n        Returns:\n            List[DocumentWithScore]: List of documents and sorted by score\n        \"\"\"\n        scores = self.model.rerank_documents(query, [doc.page_content for doc in docs])\n        mapped_documents = [\n            DocumentWithScore(\n                page_content=doc.page_content,\n                metadata=doc.metadata,\n                score=score,\n            )\n            for doc, score in zip(docs, scores)\n        ]\n        sorted_documents = sorted(mapped_documents, key=lambda x: x.score, reverse=True)\n        return sorted_documents\n</code></pre>"},{"location":"reference/core/rerank.html#core.rerank.Rerank.__init__","title":"<code>__init__(model)</code>","text":"<p>Initialize the rerank model</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>RerankModel</code> <p>Rerank model</p> required Source code in <code>core/rerank.py</code> <pre><code>def __init__(self, model: Annotated[RerankModel, \"Rerank model\"]) -&gt; None:\n    \"\"\"\n    Initialize the rerank model\n\n    Args:\n        model (RerankModel): Rerank model\n    \"\"\"\n    self.model = model\n</code></pre>"},{"location":"reference/core/rerank.html#core.rerank.Rerank.rerank_documents","title":"<code>rerank_documents(query, docs)</code>","text":"<p>Rerank the documents based on the query</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query use to rerank</p> required <code>docs</code> <code>List[Document]</code> <p>List of documents</p> required <p>Returns:</p> Type Description <code>Annotated[List[DocumentWithScore], 'List of documents with ranked score and sorted by score']</code> <p>List[DocumentWithScore]: List of documents and sorted by score</p> Source code in <code>core/rerank.py</code> <pre><code>def rerank_documents(\n    self,\n    query: Annotated[str, \"The query use to rerank\"],\n    docs: Annotated[List[Document], \"List of documents\"],\n) -&gt; Annotated[\n    List[DocumentWithScore],\n    \"List of documents with ranked score and sorted by score\",\n]:\n    \"\"\"\n    Rerank the documents based on the query\n\n    Args:\n        query (str): The query use to rerank\n        docs (List[Document]): List of documents\n\n    Returns:\n        List[DocumentWithScore]: List of documents and sorted by score\n    \"\"\"\n    scores = self.model.rerank_documents(query, [doc.page_content for doc in docs])\n    mapped_documents = [\n        DocumentWithScore(\n            page_content=doc.page_content,\n            metadata=doc.metadata,\n            score=score,\n        )\n        for doc, score in zip(docs, scores)\n    ]\n    sorted_documents = sorted(mapped_documents, key=lambda x: x.score, reverse=True)\n    return sorted_documents\n</code></pre>"},{"location":"reference/core/rerank.html#core.rerank.RerankModel","title":"<code>RerankModel</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Rerank Model</p> Source code in <code>core/rerank.py</code> <pre><code>class RerankModel(ABC):\n    \"\"\"Rerank Model\"\"\"\n\n    @abstractmethod\n    def rerank_documents(\n        self,\n        query: Annotated[str, \"The query use to rerank\"],\n        docs: Annotated[List[str], \"List of documents\"],\n    ) -&gt; Annotated[List[float], \"List of scores for each document\"]:\n        \"\"\"\n        Rerank the documents based on the query\n\n        Args:\n            query (str): The query use to rerank\n            docs (List[str]): List of documents\n\n        Returns:\n            List[float]: List of relevance scores\n        \"\"\"\n</code></pre>"},{"location":"reference/core/rerank.html#core.rerank.RerankModel.rerank_documents","title":"<code>rerank_documents(query, docs)</code>  <code>abstractmethod</code>","text":"<p>Rerank the documents based on the query</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The query use to rerank</p> required <code>docs</code> <code>List[str]</code> <p>List of documents</p> required <p>Returns:</p> Type Description <code>Annotated[List[float], 'List of scores for each document']</code> <p>List[float]: List of relevance scores</p> Source code in <code>core/rerank.py</code> <pre><code>@abstractmethod\ndef rerank_documents(\n    self,\n    query: Annotated[str, \"The query use to rerank\"],\n    docs: Annotated[List[str], \"List of documents\"],\n) -&gt; Annotated[List[float], \"List of scores for each document\"]:\n    \"\"\"\n    Rerank the documents based on the query\n\n    Args:\n        query (str): The query use to rerank\n        docs (List[str]): List of documents\n\n    Returns:\n        List[float]: List of relevance scores\n    \"\"\"\n</code></pre>"},{"location":"reference/core/vector_store.html","title":"core.vector_store","text":""},{"location":"reference/core/vector_store.html#core.vector_store.VectorStore","title":"<code>VectorStore</code>","text":"<p>Vector store class</p> Source code in <code>core/vector_store.py</code> <pre><code>class VectorStore:\n    \"\"\"Vector store class\"\"\"\n\n    def __init__(\n        self,\n        collection_name: Annotated[\n            Optional[str],\n            \"Collection name\",\n        ] = \"default_collection\",\n        client: Annotated[\n            Optional[chromadb.api.client.Client],\n            \"Chroma client\",\n        ] = chromadb.Client(),\n        embeddings: Annotated[\n            Optional[chromadb.Embeddings],\n            \"Embeddings function\",\n        ] = embedding_functions.DefaultEmbeddingFunction(),\n    ):\n        \"\"\"\n        Initialize the vector store\n\n        Args:\n            collection_name (str): Collection name\n            client (chromadb.api.client.Client): ChromaDB client\n            embeddings (chromadb.Embeddings): Embeddings function\n        \"\"\"\n        self.collection = client.get_or_create_collection(\n            name=collection_name,\n            embedding_function=embeddings,\n            metadata={\"hnsw:space\": \"cosine\"},\n        )\n\n    def add_documents(\n        self,\n        documents: Annotated[\n            list[str],\n            \"List of documents\",\n        ],\n        reference_id: Annotated[\n            Optional[str],\n            \"Reference ID\",\n        ] = None,\n    ) -&gt; Annotated[\n        list[str],\n        \"List of document IDs\",\n    ]:\n        \"\"\"\n        Add documents to the vector store\n\n        Args:\n            documents (list[Document]): List of documents\n            reference_id (str): Reference id\n\n        Returns:\n            list[str]: List of document IDs\n        \"\"\"\n        metadatas = (\n            [\n                {\n                    \"reference_id\": reference_id,\n                }\n                for _ in range(len(documents))\n            ]\n            if reference_id is not None\n            else [{} for _ in range(len(documents))]\n        )\n        ids = [nanoid.generate() for _ in range(len(documents))]\n        self.collection.add(\n            documents=documents,\n            ids=ids,\n            metadatas=metadatas,\n        )\n        return ids\n\n    def similarity_search(\n        self,\n        query: Annotated[\n            str,\n            \"Query string\",\n        ],\n        reference_id: Annotated[\n            Optional[str],\n            \"Reference ID\",\n        ] = None,\n        k: Annotated[\n            int,\n            \"Number of result documents\",\n        ] = 3,\n    ) -&gt; list[Tuple[Document, float]]:\n        \"\"\"\n        Search for similar documents\n\n        Args:\n            query (str): Query string\n            reference_id (str): Reference ID\n            k (int): Number of result documents\n\n        Returns:\n            list[Tuple[Document, float]]: List of documents and their similarity scores\n        \"\"\"\n        where = {\"reference_id\": reference_id} if reference_id is not None else None\n        res = self.collection.query(\n            query_texts=[query],\n            n_results=k,\n            where=where,\n        )\n        return [\n            (\n                Document(\n                    page_content=res[\"documents\"][0][i],\n                    metadata=res[\"metadatas\"][0][i],\n                ),\n                res[\"distances\"][0][i] / 100,\n            )\n            for i in range(len(res[\"documents\"][0]))\n        ]\n\n    def delete_by_reference_id(\n        self,\n        reference_id: Annotated[\n            str,\n            \"Reference ID\",\n        ],\n    ) -&gt; None:\n        \"\"\"\n        Delete documents by reference_id\n\n        Args:\n            reference_id (str): Reference ID\n\n        Returns:\n            None\n        \"\"\"\n        self.collection.delete(where={\"reference_id\": reference_id})\n</code></pre>"},{"location":"reference/core/vector_store.html#core.vector_store.VectorStore.__init__","title":"<code>__init__(collection_name='default_collection', client=chromadb.Client(), embeddings=embedding_functions.DefaultEmbeddingFunction())</code>","text":"<p>Initialize the vector store</p> <p>Parameters:</p> Name Type Description Default <code>collection_name</code> <code>str</code> <p>Collection name</p> <code>'default_collection'</code> <code>client</code> <code>Client</code> <p>ChromaDB client</p> <code>Client()</code> <code>embeddings</code> <code>Embeddings</code> <p>Embeddings function</p> <code>DefaultEmbeddingFunction()</code> Source code in <code>core/vector_store.py</code> <pre><code>def __init__(\n    self,\n    collection_name: Annotated[\n        Optional[str],\n        \"Collection name\",\n    ] = \"default_collection\",\n    client: Annotated[\n        Optional[chromadb.api.client.Client],\n        \"Chroma client\",\n    ] = chromadb.Client(),\n    embeddings: Annotated[\n        Optional[chromadb.Embeddings],\n        \"Embeddings function\",\n    ] = embedding_functions.DefaultEmbeddingFunction(),\n):\n    \"\"\"\n    Initialize the vector store\n\n    Args:\n        collection_name (str): Collection name\n        client (chromadb.api.client.Client): ChromaDB client\n        embeddings (chromadb.Embeddings): Embeddings function\n    \"\"\"\n    self.collection = client.get_or_create_collection(\n        name=collection_name,\n        embedding_function=embeddings,\n        metadata={\"hnsw:space\": \"cosine\"},\n    )\n</code></pre>"},{"location":"reference/core/vector_store.html#core.vector_store.VectorStore.add_documents","title":"<code>add_documents(documents, reference_id=None)</code>","text":"<p>Add documents to the vector store</p> <p>Parameters:</p> Name Type Description Default <code>documents</code> <code>list[Document]</code> <p>List of documents</p> required <code>reference_id</code> <code>str</code> <p>Reference id</p> <code>None</code> <p>Returns:</p> Type Description <code>Annotated[list[str], 'List of document IDs']</code> <p>list[str]: List of document IDs</p> Source code in <code>core/vector_store.py</code> <pre><code>def add_documents(\n    self,\n    documents: Annotated[\n        list[str],\n        \"List of documents\",\n    ],\n    reference_id: Annotated[\n        Optional[str],\n        \"Reference ID\",\n    ] = None,\n) -&gt; Annotated[\n    list[str],\n    \"List of document IDs\",\n]:\n    \"\"\"\n    Add documents to the vector store\n\n    Args:\n        documents (list[Document]): List of documents\n        reference_id (str): Reference id\n\n    Returns:\n        list[str]: List of document IDs\n    \"\"\"\n    metadatas = (\n        [\n            {\n                \"reference_id\": reference_id,\n            }\n            for _ in range(len(documents))\n        ]\n        if reference_id is not None\n        else [{} for _ in range(len(documents))]\n    )\n    ids = [nanoid.generate() for _ in range(len(documents))]\n    self.collection.add(\n        documents=documents,\n        ids=ids,\n        metadatas=metadatas,\n    )\n    return ids\n</code></pre>"},{"location":"reference/core/vector_store.html#core.vector_store.VectorStore.delete_by_reference_id","title":"<code>delete_by_reference_id(reference_id)</code>","text":"<p>Delete documents by reference_id</p> <p>Parameters:</p> Name Type Description Default <code>reference_id</code> <code>str</code> <p>Reference ID</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>core/vector_store.py</code> <pre><code>def delete_by_reference_id(\n    self,\n    reference_id: Annotated[\n        str,\n        \"Reference ID\",\n    ],\n) -&gt; None:\n    \"\"\"\n    Delete documents by reference_id\n\n    Args:\n        reference_id (str): Reference ID\n\n    Returns:\n        None\n    \"\"\"\n    self.collection.delete(where={\"reference_id\": reference_id})\n</code></pre>"},{"location":"reference/core/vector_store.html#core.vector_store.VectorStore.similarity_search","title":"<code>similarity_search(query, reference_id=None, k=3)</code>","text":"<p>Search for similar documents</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Query string</p> required <code>reference_id</code> <code>str</code> <p>Reference ID</p> <code>None</code> <code>k</code> <code>int</code> <p>Number of result documents</p> <code>3</code> <p>Returns:</p> Type Description <code>list[Tuple[Document, float]]</code> <p>list[Tuple[Document, float]]: List of documents and their similarity scores</p> Source code in <code>core/vector_store.py</code> <pre><code>def similarity_search(\n    self,\n    query: Annotated[\n        str,\n        \"Query string\",\n    ],\n    reference_id: Annotated[\n        Optional[str],\n        \"Reference ID\",\n    ] = None,\n    k: Annotated[\n        int,\n        \"Number of result documents\",\n    ] = 3,\n) -&gt; list[Tuple[Document, float]]:\n    \"\"\"\n    Search for similar documents\n\n    Args:\n        query (str): Query string\n        reference_id (str): Reference ID\n        k (int): Number of result documents\n\n    Returns:\n        list[Tuple[Document, float]]: List of documents and their similarity scores\n    \"\"\"\n    where = {\"reference_id\": reference_id} if reference_id is not None else None\n    res = self.collection.query(\n        query_texts=[query],\n        n_results=k,\n        where=where,\n    )\n    return [\n        (\n            Document(\n                page_content=res[\"documents\"][0][i],\n                metadata=res[\"metadatas\"][0][i],\n            ),\n            res[\"distances\"][0][i] / 100,\n        )\n        for i in range(len(res[\"documents\"][0]))\n    ]\n</code></pre>"},{"location":"reference/core/models/index.html","title":"core.models","text":"<p>core.models package.</p> <p>FlexibleRAG core.models package.</p>"},{"location":"reference/core/models/chat.html","title":"core.models.chat","text":""},{"location":"reference/core/models/chat.html#core.models.chat.ChatMessage","title":"<code>ChatMessage</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Chat message</p> <p>Attributes:</p> Name Type Description <code>role</code> <code>ChatMessageRole</code> <p>Role of the message</p> <code>content</code> <code>str</code> <p>Content of the message</p> Source code in <code>core/models/chat.py</code> <pre><code>class ChatMessage(BaseModel):\n    \"\"\"\n    Chat message\n\n    Attributes:\n        role (ChatMessageRole): Role of the message\n        content (str): Content of the message\n    \"\"\"\n\n    role: ChatMessageRole = Field(\n        ...,\n        title=\"Role of the message\",\n        description=\"Role of the message\",\n    )\n    content: str = Field(\n        ...,\n        title=\"Content of the message\",\n        description=\"Content of the message\",\n        examples=[\"Hello, how can I help you today?\"],\n    )\n</code></pre>"},{"location":"reference/core/models/chat.html#core.models.chat.ChatMessageRole","title":"<code>ChatMessageRole</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Role of the message</p> <p>Attributes:</p> Name Type Description <code>Human</code> <code>str</code> <p>Human role</p> <code>Ai</code> <code>str</code> <p>AI role</p> <code>System</code> <code>str</code> <p>System role</p> Source code in <code>core/models/chat.py</code> <pre><code>class ChatMessageRole(str, Enum):\n    \"\"\"\n    Role of the message\n\n    Attributes:\n        Human (str): Human role\n        Ai (str): AI role\n        System (str): System role\n    \"\"\"\n\n    Human = \"human\"\n    Ai = \"ai\"\n    System = \"system\"\n</code></pre>"},{"location":"reference/core/models/documents.html","title":"core.models.documents","text":""},{"location":"reference/core/models/documents.html#core.models.documents.Document","title":"<code>Document</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Document with Score</p> <p>Attributes:</p> Name Type Description <code>page_content</code> <code>str</code> <p>Page content</p> <code>metadata</code> <code>DocumentWithScoreMetadata</code> <p>Metadata</p> <code>score</code> <code>float</code> <p>Score</p> Source code in <code>core/models/documents.py</code> <pre><code>class Document(BaseModel):\n    \"\"\"\n    Document with Score\n\n    Attributes:\n        page_content (str): Page content\n        metadata (DocumentWithScoreMetadata): Metadata\n        score (float): Score\n    \"\"\"\n\n    model_config = {\n        \"title\": \"Document with Score\",\n        \"strict\": True,\n    }\n    page_content: str = Field(\n        ...,\n        title=\"Page content\",\n        description=\"Page content\",\n        examples=[\"Hoang Sa and Truong Sa belong to Vietnam\"],\n    )\n    metadata: DocumentMetadata = Field(\n        ...,\n        title=\"Metadata\",\n        description=\"Metadata\",\n    )\n</code></pre>"},{"location":"reference/core/models/documents.html#core.models.documents.DocumentMetadata","title":"<code>DocumentMetadata</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata for Document with Score</p> <p>Attributes:</p> Name Type Description <code>reference_id</code> <code>str</code> <p>Reference ID</p> Source code in <code>core/models/documents.py</code> <pre><code>class DocumentMetadata(BaseModel):\n    \"\"\"\n    Metadata for Document with Score\n\n    Attributes:\n        reference_id (str): Reference ID\n    \"\"\"\n\n    model_config = {\n        \"title\": \"Document with Score Metadata\",\n        \"strict\": True,\n    }\n    reference_id: str = Field(\n        ...,\n        title=\"Reference ID\",\n        description=\"Reference ID\",\n        examples=[\"1\"],\n    )\n</code></pre>"},{"location":"reference/core/models/documents.html#core.models.documents.DocumentWithScore","title":"<code>DocumentWithScore</code>","text":"<p>               Bases: <code>Document</code></p> <p>Document with Score</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>float</code> <p>Score</p> Source code in <code>core/models/documents.py</code> <pre><code>class DocumentWithScore(Document):\n    \"\"\"\n    Document with Score\n\n    Attributes:\n        score (float): Score\n    \"\"\"\n\n    model_config = {\n        \"title\": \"Document with Score\",\n        \"strict\": True,\n    }\n    score: float = Field(\n        ...,\n        title=\"Score\",\n        description=\"Score\",\n        examples=[0.99],\n    )\n</code></pre>"},{"location":"blog/archive/2024.html","title":"2024","text":""},{"location":"blog/category/example-category.html","title":"Example category","text":""}]}